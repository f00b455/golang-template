name: Claude Iterative Code Review & Fix

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review and fix'
        required: true
        type: string
      max_iterations:
        description: 'Maximum number of fix iterations (default: 3)'
        required: false
        default: '3'
        type: string

  issue_comment:
    types: [created]

jobs:
  iterative-review:
    # Only run on manual dispatch or specific comment trigger
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@claude fix review issues'))

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      checks: read

    env:
      MAX_ITERATIONS: ${{ github.event.inputs.max_iterations || '3' }}
      PR_NUMBER: ${{ github.event.inputs.pr_number || github.event.issue.number }}
      ITERATION_LABEL_PREFIX: "claude-iteration"

    steps:
      - name: Setup - Get PR Information
        id: pr-info
        run: |
          echo "Getting PR information for #$PR_NUMBER"
          PR_DATA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER)
          echo "pr_head_ref=$(echo "$PR_DATA" | jq -r '.head.ref')" >> $GITHUB_OUTPUT
          echo "pr_base_ref=$(echo "$PR_DATA" | jq -r '.base.ref')" >> $GITHUB_OUTPUT
          echo "pr_head_sha=$(echo "$PR_DATA" | jq -r '.head.sha')" >> $GITHUB_OUTPUT
          echo "pr_title=$(echo "$PR_DATA" | jq -r '.title')" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup - Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.pr_head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup - Initialize Iteration Tracking
        id: iteration-setup
        run: |
          # Get current iteration count from PR labels
          LABELS=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/labels | jq -r '.[].name')
          CURRENT_ITERATION=$(echo "$LABELS" | grep "^$ITERATION_LABEL_PREFIX-[0-9]" | tail -1 | sed "s/$ITERATION_LABEL_PREFIX-//" || echo "0")
          NEXT_ITERATION=$((CURRENT_ITERATION + 1))

          echo "current_iteration=$CURRENT_ITERATION" >> $GITHUB_OUTPUT
          echo "next_iteration=$NEXT_ITERATION" >> $GITHUB_OUTPUT

          if [ $NEXT_ITERATION -gt $MAX_ITERATIONS ]; then
            echo "max_iterations_reached=true" >> $GITHUB_OUTPUT
            echo "‚ùå Maximum iterations ($MAX_ITERATIONS) reached for PR #$PR_NUMBER"
            exit 1
          else
            echo "max_iterations_reached=false" >> $GITHUB_OUTPUT
            echo "üîÑ Starting iteration $NEXT_ITERATION of $MAX_ITERATIONS for PR #$PR_NUMBER"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Review - Run Claude Code Review
        id: review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Please perform a comprehensive code review of this pull request and provide specific, actionable feedback.

            Focus on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance optimizations
            - Security concerns
            - Test coverage
            - Go-specific improvements
            - Adherence to project conventions in CLAUDE.md

            IMPORTANT: Structure your response as follows:
            1. **ACTIONABLE_FIXES**: List specific changes that can be automatically applied
            2. **MANUAL_REVIEW**: Issues requiring human judgment
            3. **VALIDATION_STEPS**: Commands to verify fixes work correctly

            For each actionable fix, specify:
            - File path
            - Line number or function name
            - Exact change to make
            - Reason for change

            Use clear, structured format that can be parsed by automation.

          claude_args: |
            --allowed-tools "Bash(gh pr view:*),Bash(gh pr diff:*),Bash(go build),Bash(go test),Bash(go mod),Bash(make),Bash(make test),Bash(make build),Bash(make lint)"

      - name: Parse Review Results
        id: parse-review
        run: |
          # Extract actionable fixes from Claude's review
          echo "Parsing Claude's review feedback..."

          # Check if review contains actionable fixes
          if gh pr view $PR_NUMBER --json comments | jq -r '.comments[-1].body' | grep -q "ACTIONABLE_FIXES"; then
            echo "has_actionable_fixes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found actionable fixes in review"
          else
            echo "has_actionable_fixes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No actionable fixes found in review"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Apply Fixes
        id: apply-fixes
        if: steps.parse-review.outputs.has_actionable_fixes == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Based on the previous code review, please apply the specific fixes mentioned in the ACTIONABLE_FIXES section.

            Rules for applying fixes:
            1. Only make the specific changes identified in the review
            2. Maintain existing functionality
            3. Follow Go coding standards
            4. Update tests if code changes affect them
            5. Run validation after each significant change

            After applying fixes:
            1. Run `go mod tidy` to clean up dependencies
            2. Run `make lint` to check code style
            3. Run `make test` to verify functionality
            4. Run `make build` to ensure compilation

            If any step fails, document the issue and continue with remaining fixes.

          claude_args: |
            --allowed-tools "Bash(go mod tidy),Bash(go fmt),Bash(go build),Bash(go test),Bash(make),Bash(make test),Bash(make build),Bash(make lint)"

      - name: Validate Changes
        id: validate
        if: steps.parse-review.outputs.has_actionable_fixes == 'true'
        run: |
          echo "üß™ Validating applied fixes..."

          # Check for uncommitted changes
          if git diff --quiet && git diff --cached --quiet; then
            echo "validation_result=no_changes" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes were applied"
            exit 0
          fi

          # Run validation pipeline
          echo "changes_applied=true" >> $GITHUB_OUTPUT

          # Build validation
          if make build; then
            echo "build_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Build successful"
          else
            echo "build_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Build failed"
            exit 1
          fi

          # Test validation
          if make test; then
            echo "test_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests passed"
          else
            echo "test_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Tests failed"
            exit 1
          fi

          # Lint validation
          if make lint; then
            echo "lint_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Linting passed"
          else
            echo "lint_status=success" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Linting issues found (non-blocking)"
          fi

          echo "validation_result=success" >> $GITHUB_OUTPUT

      - name: Commit Changes
        id: commit
        if: steps.validate.outputs.changes_applied == 'true' && steps.validate.outputs.validation_result == 'success'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "Claude Iterative Review"

          # Stage and commit changes
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
            echo "commit_created=false" >> $GITHUB_OUTPUT
          else
            ITERATION_NUM=${{ steps.iteration-setup.outputs.next_iteration }}
            git commit -m "ü§ñ Auto-fix code review issues (iteration $ITERATION_NUM)

Applied fixes from Claude code review iteration $ITERATION_NUM:
- Automated code quality improvements
- Bug fixes and optimizations
- Style and convention adherence

Generated by Claude Iterative Review workflow
Run ID: ${{ github.run_id }}"

            git push origin ${{ steps.pr-info.outputs.pr_head_ref }}
            echo "commit_created=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes committed and pushed"
          fi

      - name: Update Iteration Tracking
        if: always()
        run: |
          ITERATION_NUM=${{ steps.iteration-setup.outputs.next_iteration }}

          # Remove old iteration labels
          gh api repos/${{ github.repository }}/issues/$PR_NUMBER/labels | \
            jq -r '.[].name' | \
            grep "^$ITERATION_LABEL_PREFIX-[0-9]" | \
            xargs -I {} gh api -X DELETE repos/${{ github.repository }}/issues/$PR_NUMBER/labels/{} || true

          # Add current iteration label
          gh api repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
            -f labels[]="$ITERATION_LABEL_PREFIX-$ITERATION_NUM"

          echo "üè∑Ô∏è Updated iteration tracking label"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report Results
        if: always()
        run: |
          ITERATION_NUM=${{ steps.iteration-setup.outputs.next_iteration }}

          # Build status report
          REPORT="## ü§ñ Claude Iterative Review Report - Iteration $ITERATION_NUM/$MAX_ITERATIONS

### Iteration Summary
- **PR**: #$PR_NUMBER - ${{ steps.pr-info.outputs.pr_title }}
- **Iteration**: $ITERATION_NUM of $MAX_ITERATIONS
- **Trigger**: ${{ github.event_name }}
- **Run ID**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

### Results"

          if [ "${{ steps.parse-review.outputs.has_actionable_fixes }}" = "true" ]; then
            REPORT="$REPORT
- ‚úÖ **Review Completed**: Found actionable fixes"

            if [ "${{ steps.validate.outputs.validation_result }}" = "success" ]; then
              REPORT="$REPORT
- ‚úÖ **Fixes Applied**: Code changes applied successfully
- ‚úÖ **Validation**: Build [${{ steps.validate.outputs.build_status }}] | Tests [${{ steps.validate.outputs.test_status }}] | Lint [${{ steps.validate.outputs.lint_status }}]"

              if [ "${{ steps.commit.outputs.commit_created }}" = "true" ]; then
                REPORT="$REPORT
- ‚úÖ **Changes Committed**: Fixes pushed to PR branch"
              fi
            else
              REPORT="$REPORT
- ‚ùå **Validation Failed**: Issues found during validation"
            fi
          else
            REPORT="$REPORT
- ‚ÑπÔ∏è **No Fixes Needed**: No actionable issues found in review"
          fi

          # Check if more iterations are possible
          if [ $ITERATION_NUM -lt $MAX_ITERATIONS ]; then
            REPORT="$REPORT

### Next Steps
- More iterations available ($ITERATION_NUM/$MAX_ITERATIONS used)
- Comment \`@claude fix review issues\` to trigger next iteration
- Or manually run workflow dispatch with PR #$PR_NUMBER"
          else
            REPORT="$REPORT

### Final Iteration
- Maximum iterations reached ($MAX_ITERATIONS/$MAX_ITERATIONS)
- Manual review may be required for remaining issues"
          fi

          REPORT="$REPORT

---
*Automated by Claude Iterative Review workflow*"

          # Post report as PR comment
          gh pr comment $PR_NUMBER --body "$REPORT"

          echo "üìä Results report posted to PR"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "üßπ Cleaning up after workflow failure..."

          # Revert any uncommitted changes
          git checkout -- . || true
          git clean -fd || true

          # Post failure notice
          gh pr comment $PR_NUMBER --body "## ‚ùå Claude Iterative Review Failed

Iteration ${{ steps.iteration-setup.outputs.next_iteration }} encountered an error.

**Error Details**: Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

**Next Steps**:
- Review the error logs
- Fix any issues manually
- Re-run the workflow with \`@claude fix review issues\`

---
*Automated by Claude Iterative Review workflow*"

          echo "‚ùå Failure notice posted to PR"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}